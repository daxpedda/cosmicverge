name: Deploy

on:
  push:

jobs:
  test:
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          persist-credentials: true
          ssh-key: ${{ secrets.BOTSU_PRIVATE_SSH_KEY }}

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1

      - name: Configure environment for CI postgres
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:$POSTGRES_PORT/postgres" >> .env
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Run migrations on CI postgres
        run: |
          cd native
          cargo run --bin migrator --release

      - name: Run tests
        # This script should eventually run tests on the web project, and to
        # build that we will need the BASWS_CLIENT_ENCRYPTION_KEY environment
        # variable For tests, it can be an arbitrary 32-charcter value, for
        # example, this string: abcdefghijklmnopqrstuvwxzy123456.
        run: |
          cd native
          cargo test --release --verbose

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/main'
    needs: test

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          persist-credentials: true
          ssh-key: ${{ secrets.BOTSU_PRIVATE_SSH_KEY }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/wasm-bindgen
            ~/binaryen/bin/wasm-opt

          key: build-tools

      - name: Install binaryen
        run: |
          if [ ! -f ~/binaryen/bin/wasm-opt ]; then
            wget https://github.com/WebAssembly/binaryen/archive/version_99.tar.gz
            mkdir ~/binaryen
            tar -xzf version_99.tar.gz -C ~/binaryen --strip-components 1
            cd ~/binaryen
            cmake . 
            make
          fi

      - name: Install Rust
        uses: hecrj/setup-rust-action@v1

      - name: Install wasm-bindgen-cli
        run: cargo -v install wasm-bindgen-cli

      - name: Install Sass
        run: |
          sudo npm install -g sass

      - uses: digitalocean/action-doctl@v2
        if: github.ref == 'refs/heads/main'
        with:
          token: ${{ secrets.DO_WRITE_API_KEY }}

      - name: Configure environment for CI postgres
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:$POSTGRES_PORT/postgres" >> .env
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Run migrations on CI postgres
        run: |
          cd native
          cargo run --bin migrator --release

      - name: Build
        run: |
          cd web
          sed -i s/CACHEBUSTER/`uuidgen`/g static/bootstrap.html
          cargo build --target wasm32-unknown-unknown --release
          wasm-bindgen target/wasm32-unknown-unknown/release/web.wasm --target web --out-dir static/pkg --out-name web --remove-producers-section
          ~/binaryen/bin/wasm-opt -Os static/pkg/web_bg.wasm -o static/pkg/web_bg.wasm
          sass sass/styles.sass static/styles.css

          cd ../native
          cargo build --bin cosmicverge-server --release
          cargo run --bin cosmicverge-server --release -- generate-assets ../web/static/
        env:
          BASWS_CLIENT_ENCRYPTION_KEY: ${{ secrets.CLIENT_ENCRYPTION_KEY }}

      - name: Authenticate with DigitalOcean Registry
        run: |
          doctl registry login --expiry-seconds 600

      - name: Publish Docker Image
        run: |
          docker build . -t registry.digitalocean.com/khonsulabs/cosmicverge:sha-$GITHUB_SHA -t registry.digitalocean.com/khonsulabs/cosmicverge:main
          docker push -a registry.digitalocean.com/khonsulabs/cosmicverge

      - name: Update Kubernetes
        run: |
          doctl kubernetes cluster kubeconfig save $CLUSTER_ID

          sed -i s/cosmicverge:main/cosmicverge:sha-$GITHUB_SHA/g kubernetes/production.yml
          kubectl apply -f kubernetes/production.yml
          # Wait for the deployment to finish
          kubectl rollout status deployment/cosmicverge --timeout=120s
        env:
          CLUSTER_ID: ${{ secrets.PRODUCTION_CLUSTER_ID }}

        # This is because each worker sends some static resources. We could deploy the static resources before the new CACHEBUSTER gets deployed
        # but we need to deploy it using a simple SPA wrapper which is kind of annoying. For now, there may be cache confusion while kube updates
        # but we purge the cache afterwards to clean it up
      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          # Zone is required by both authentication methods
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Generate Docs
        run: |
          cd web
          cargo doc --no-deps --release
          cd ../native
          cargo doc --no-deps --release
          cp -r ../web/target/doc/web target/doc/
        env:
          BASWS_CLIENT_ENCRYPTION_KEY: ${{ secrets.CLIENT_ENCRYPTION_KEY }}

      - name: Deploy Docs
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages
          folder: native/target/doc/
          git-config-name: kl-botsu
          git-config-email: botsu@khonsulabs.com
          target-folder: main/
          clean: true
