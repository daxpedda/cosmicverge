Parameters:
  TagPrefix:
    Type: String
  FullCidr:
    Type: String
  PrivateCidrs:
    Type: List<String>
  PublicCidrs:
    Type: List<String>
  PublicIPv6Cidrs:
    Type: List<String>
    Default: ""

Conditions:
  ConfigurePublicIpv6:
    Fn::Not:
      - Fn::Equals:
          - Fn::Join:
              - ""
              - Ref: PublicIPv6Cidrs
          - ""

Resources:
  vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref FullCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "vpc"]]
  ipv6Block:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref vpc
  publicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Select [0, !Ref PublicCidrs]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "public-1"]]
  publicSubnet1v6Block:
    Type: AWS::EC2::SubnetCidrBlock
    Condition: ConfigurePublicIpv6
    Properties:
      Ipv6CidrBlock: !Select [0, !Ref PublicIPv6Cidrs]
      SubnetId: !Ref publicSubnet1
  publicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Select [1, !Ref PublicCidrs]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "public-2"]]
  publicSubnet2v6Block:
    Type: AWS::EC2::SubnetCidrBlock
    Condition: ConfigurePublicIpv6
    Properties:
      Ipv6CidrBlock: !Select [1, !Ref PublicIPv6Cidrs]
      SubnetId: !Ref publicSubnet2
  privateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Select [0, !Ref PrivateCidrs]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "private-1"]]
  # privateSubnet1v6Block:
  #   Type: AWS::EC2::SubnetCidrBlock
  #   Condition: ConfigureIpv6
  #   Properties:
  #     Ipv6CidrBlock: !Select [0, !Ref PrivateIPv6Cidrs]
  #     SubnetId: !Ref privateSubnet1
  privateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Select [1, !Ref PrivateCidrs]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "private-2"]]
  # privateSubnet2v6Block:
  #   Type: AWS::EC2::SubnetCidrBlock
  #   Condition: ConfigureIpv6
  #   Properties:
  #     Ipv6CidrBlock: !Select [1, !Ref PrivateIPv6Cidrs]
  #     SubnetId: !Ref privateSubnet2
  internetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "igw"]]
  internetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc
  natIP:
    Type: "AWS::EC2::EIP"
    DependsOn:
      - vpc
    Properties:
      Domain: vpc
  publicRoutingTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "public-rt"]]
  publicRouteInternet:
    Type: AWS::EC2::Route
    DependsOn:
      - internetGatewayAttachment
    Properties:
      RouteTableId: !Ref publicRoutingTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
  publicRouteInternet6:
    Type: AWS::EC2::Route
    DependsOn:
      - internetGatewayAttachment
    Properties:
      RouteTableId: !Ref publicRoutingTable
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref internetGateway
  publicRouteSubnet1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRoutingTable
      SubnetId: !Ref publicSubnet1
  publicRouteSubnet2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRoutingTable
      SubnetId: !Ref publicSubnet2
  natGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt natIP.AllocationId
      SubnetId: !Ref publicSubnet1
  privateRoutingTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref TagPrefix, "private-rt"]]
  privateRouteInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRoutingTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGateway
  privateRouteSubnet1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRoutingTable
      SubnetId: !Ref privateSubnet1
  privateRouteSubnet2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRoutingTable
      SubnetId: !Ref privateSubnet2

Outputs:
  Vpc:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-id]]
    Value: !Ref vpc
  AvailabilityZone1:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-az-1]]
    Value:
      Fn::Select:
        - 0
        - Fn::GetAZs: ""
  AvailabilityZone2:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-az-2]]
    Value:
      Fn::Select:
        - 1
        - Fn::GetAZs: ""
  PublicSubnet1:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-public-subnet-1]]
    Value: !Ref publicSubnet1
  PublicSubnet2:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-public-subnet-2]]
    Value: !Ref publicSubnet2
  PrivateSubnet1:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-private-subnet-1]]
    Value: !Ref privateSubnet1
  PrivateSubnet2:
    Export:
      Name: !Join [":", [!Ref TagPrefix, vpc-private-subnet-2]]
    Value: !Ref privateSubnet2
